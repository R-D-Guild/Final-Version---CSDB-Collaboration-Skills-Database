{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,SCGA,MAAM,EAAiB,SAAS,cAAc,CAAC,yBACzC,EAAuB,SAAS,cAAc,CAAC,mBAC/C,EAAoB,SAAS,cAAc,CAAC,0BAC5C,EAAoB,SAAS,cAAc,CAAC,qBAC5C,EAAa,SAAS,cAAc,CAAC,cAQrC,EAAY,KAChB,EAAkB,KAAK,CAAC,OAAO,CAAG,MACpC,EAIM,EAAsB,AAAC,IAC3B,EAAkB,WAAW,CAAG,EAChC,EAAkB,SAAS,CAAC,GAAG,CAAC,QAAS,SACzC,EAAkB,KAAK,CAAC,OAAO,CAAG,QAGlC,WAAW,KACT,EAAkB,KAAK,CAAC,OAAO,CAAG,OAClC,EAAkB,SAAS,CAAC,MAAM,CAAC,QACrC,EAAG,IACL,EAGM,EAAuB,KAC3B,EAAkB,KAAK,CAAC,OAAO,CAAG,OAClC,EAAkB,SAAS,CAAC,MAAM,CAAC,QACrC,EAGM,EAAe,KACK,aAApB,OAAO,UACT,SAAS,KAAK,EAElB,EAGM,EAAmB,MAAO,IAC9B,GAAM,CAAA,KAAE,CAAI,CAAA,MAAE,CAAK,CAAE,CAAG,MAAM,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAC3B,IAAI,CAAC,cACL,MAAM,CAAC,SACP,EAAE,CAAC,QAAS,GACZ,MAAM,GAET,OAAO,CACT,EAGA,EAAe,gBAAgB,CAAC,SAAU,MAAO,IAC/C,EAAM,cAAc,GAEpB,IAAM,EAAQ,EAAqB,KAAK,CAAC,IAAI,GACvC,EAAe,SAAS,WAAW,GAKzC,GAHA,IAGI,CAAC,EAAO,CACV,EAAoB,4BACpB,MACF,CAGA,GAAI,CAAC,EAAc,CACjB,EAAoB,gCACpB,MACF,CAEA,GAAI,CAIF,GAAI,CAFgB,MAAM,EAAiB,GAEzB,CAChB,EAAoB,4CACpB,IACA,MACF,CAIA,GAAM,CAAA,MAAE,CAAK,CAAE,CAAG,MAAM,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,IAAI,CAAC,qBAAqB,CAAC,EAAO,CACjE,aAAA,CACF,GAEA,GAAI,EAAO,CACT,EAAoB,6BAA+B,EAAM,OAAO,EAChE,IACA,MACF,CAvFF,EAAkB,KAAK,CAAC,OAAO,CAAG,MA4FlC,CAAE,MAAO,EAAO,CACd,EAAoB,iDACpB,GACF,CACF,GAGA,EAAW,gBAAgB,CAAC,QAAS,KACnC,IAGA,WAAW,KACT,OAAO,QAAQ,CAAC,IAAI,CAAG,sBACzB,EAAG,IACL","sources":["<anon>","public/authForgotPass.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire3d38\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire3d38\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $iAutD = parcelRequire(\"iAutD\");\n// DOM elements\nconst $42601f690614add3$var$forgotPassForm = document.getElementById(\"forgotPassFormDetails\");\nconst $42601f690614add3$var$forgotPassEmailInput = document.getElementById(\"forgotPassEmail\");\nconst $42601f690614add3$var$forgotPassMessage = document.getElementById(\"forgotPassErrorMessage\");\nconst $42601f690614add3$var$confirmationPopup = document.getElementById(\"confirmationPopup\");\nconst $42601f690614add3$var$closePopup = document.getElementById(\"closePopup\");\n// Show the confirmation popup\nfunction $42601f690614add3$var$showPopup() {\n    $42601f690614add3$var$confirmationPopup.style.display = \"flex\"; // Show the popup\n}\n// Hide the confirmation popup\nconst $42601f690614add3$var$hidePopup = ()=>{\n    $42601f690614add3$var$confirmationPopup.style.display = \"none\"; // Hide the popup\n};\n// Show error message with shake effect\nconst $42601f690614add3$var$showForgotPassError = (message)=>{\n    $42601f690614add3$var$forgotPassMessage.textContent = message;\n    $42601f690614add3$var$forgotPassMessage.classList.add(\"alert\", \"shake\");\n    $42601f690614add3$var$forgotPassMessage.style.display = \"block\";\n    // Auto-hide after 5 seconds\n    setTimeout(()=>{\n        $42601f690614add3$var$forgotPassMessage.style.display = \"none\";\n        $42601f690614add3$var$forgotPassMessage.classList.remove(\"shake\");\n    }, 5000);\n};\n// Clear error message when valid input is entered\nconst $42601f690614add3$var$clearForgotPassError = ()=>{\n    $42601f690614add3$var$forgotPassMessage.style.display = \"none\";\n    $42601f690614add3$var$forgotPassMessage.classList.remove(\"shake\");\n};\n// Reset hCaptcha after failed submission\nconst $42601f690614add3$var$resetCaptcha = ()=>{\n    if (typeof hcaptcha !== \"undefined\") hcaptcha.reset(); // Reset the hCaptcha so the user can retry\n};\n// Check if the email exists in Supabase before sending the reset link\nconst $42601f690614add3$var$checkEmailExists = async (email)=>{\n    const { data: data, error: error } = await (0, $iAutD.supabase).from(\"auth.users\") // Querying the internal auth.users table\n    .select(\"email\").eq(\"email\", email).single(); // Return a single match\n    return data; // If data exists, the email is valid\n};\n// Handle Forgot Password form submission\n$42601f690614add3$var$forgotPassForm.addEventListener(\"submit\", async (event)=>{\n    event.preventDefault();\n    const email = $42601f690614add3$var$forgotPassEmailInput.value.trim();\n    const captchaToken = hcaptcha.getResponse(); // Get the hCaptcha token\n    $42601f690614add3$var$clearForgotPassError(); // Clear any previous error messages\n    // Validate email input\n    if (!email) {\n        $42601f690614add3$var$showForgotPassError(\"Please enter your email.\");\n        return;\n    }\n    // Check for hCaptcha token\n    if (!captchaToken) {\n        $42601f690614add3$var$showForgotPassError(\"Please complete the CAPTCHA.\");\n        return;\n    }\n    try {\n        // Check if the email exists\n        const emailExists = await $42601f690614add3$var$checkEmailExists(email);\n        if (!emailExists) {\n            $42601f690614add3$var$showForgotPassError(\"This email does not exist in our system.\");\n            $42601f690614add3$var$resetCaptcha(); // Reset hCaptcha\n            return;\n        }\n        // Proceed to send the password reset link\n        const { error: error } = await (0, $iAutD.supabase).auth.resetPasswordForEmail(email, {\n            captchaToken: captchaToken // Send hCaptcha token to Supabase\n        });\n        if (error) {\n            $42601f690614add3$var$showForgotPassError(\"Error sending reset link: \" + error.message);\n            $42601f690614add3$var$resetCaptcha(); // Reset hCaptcha\n            return;\n        }\n        // Show the success popup after the reset link is sent successfully\n        $42601f690614add3$var$showPopup();\n    } catch (error) {\n        $42601f690614add3$var$showForgotPassError(\"Something went wrong. Please try again later.\");\n        $42601f690614add3$var$resetCaptcha(); // Reset hCaptcha after unexpected error\n    }\n});\n// Handle OK button click in the popup\n$42601f690614add3$var$closePopup.addEventListener(\"click\", ()=>{\n    $42601f690614add3$var$hidePopup(); // Hide the popup\n    // Redirect to the reset password page after 5 seconds\n    setTimeout(()=>{\n        window.location.href = \"/reset-password.html\"; // Change the URL as needed\n    }, 5000); // 5 seconds delay before redirect\n});\n\n\n//# sourceMappingURL=forgotPass.860b03b3.js.map\n","import { supabase } from './supabaseClient';  // Import the Supabase client\r\n\r\n// DOM elements\r\nconst forgotPassForm = document.getElementById('forgotPassFormDetails');\r\nconst forgotPassEmailInput = document.getElementById('forgotPassEmail');\r\nconst forgotPassMessage = document.getElementById('forgotPassErrorMessage');\r\nconst confirmationPopup = document.getElementById('confirmationPopup');\r\nconst closePopup = document.getElementById('closePopup');\r\n\r\n// Show the confirmation popup\r\nfunction showPopup() {\r\n  confirmationPopup.style.display = 'flex';  // Show the popup\r\n}\r\n\r\n// Hide the confirmation popup\r\nconst hidePopup = () => {\r\n  confirmationPopup.style.display = 'none';  // Hide the popup\r\n};\r\n\r\n\r\n// Show error message with shake effect\r\nconst showForgotPassError = (message) => {    \r\n  forgotPassMessage.textContent = message;\r\n  forgotPassMessage.classList.add('alert', 'shake');\r\n  forgotPassMessage.style.display = 'block';\r\n\r\n  // Auto-hide after 5 seconds\r\n  setTimeout(() => {\r\n    forgotPassMessage.style.display = 'none';\r\n    forgotPassMessage.classList.remove('shake');\r\n  }, 5000);\r\n};\r\n\r\n// Clear error message when valid input is entered\r\nconst clearForgotPassError = () => {\r\n  forgotPassMessage.style.display = 'none';\r\n  forgotPassMessage.classList.remove('shake');\r\n};\r\n\r\n// Reset hCaptcha after failed submission\r\nconst resetCaptcha = () => {\r\n  if (typeof hcaptcha !== 'undefined') {\r\n    hcaptcha.reset();  // Reset the hCaptcha so the user can retry\r\n  }\r\n};\r\n\r\n// Check if the email exists in Supabase before sending the reset link\r\nconst checkEmailExists = async (email) => {\r\n  const { data, error } = await supabase\r\n    .from('auth.users')  // Querying the internal auth.users table\r\n    .select('email')\r\n    .eq('email', email)\r\n    .single();  // Return a single match\r\n\r\n  return data;  // If data exists, the email is valid\r\n};\r\n\r\n// Handle Forgot Password form submission\r\nforgotPassForm.addEventListener('submit', async (event) => {\r\n  event.preventDefault();\r\n\r\n  const email = forgotPassEmailInput.value.trim();\r\n  const captchaToken = hcaptcha.getResponse();  // Get the hCaptcha token\r\n\r\n  clearForgotPassError();  // Clear any previous error messages\r\n\r\n  // Validate email input\r\n  if (!email) {\r\n    showForgotPassError('Please enter your email.');\r\n    return;\r\n  }\r\n\r\n  // Check for hCaptcha token\r\n  if (!captchaToken) {\r\n    showForgotPassError('Please complete the CAPTCHA.');\r\n    return;\r\n  }\r\n\r\n  try {\r\n          // Check if the email exists\r\n    const emailExists = await checkEmailExists(email);\r\n\r\n    if (!emailExists) {\r\n      showForgotPassError('This email does not exist in our system.');\r\n      resetCaptcha();  // Reset hCaptcha\r\n      return;\r\n    }\r\n\r\n\r\n    // Proceed to send the password reset link\r\n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\r\n      captchaToken  // Send hCaptcha token to Supabase\r\n    });\r\n\r\n    if (error) {\r\n      showForgotPassError('Error sending reset link: ' + error.message);\r\n      resetCaptcha();  // Reset hCaptcha\r\n      return;\r\n    }\r\n\r\n    // Show the success popup after the reset link is sent successfully\r\n    showPopup();\r\n\r\n  } catch (error) {\r\n    showForgotPassError('Something went wrong. Please try again later.');\r\n    resetCaptcha();  // Reset hCaptcha after unexpected error\r\n  }\r\n});\r\n\r\n// Handle OK button click in the popup\r\nclosePopup.addEventListener('click', () => {\r\n  hidePopup();  // Hide the popup\r\n\r\n  // Redirect to the reset password page after 5 seconds\r\n  setTimeout(() => {\r\n    window.location.href = '/reset-password.html';  // Change the URL as needed\r\n  }, 5000);  // 5 seconds delay before redirect\r\n});\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$iAutD","$42601f690614add3$var$forgotPassForm","document","getElementById","$42601f690614add3$var$forgotPassEmailInput","$42601f690614add3$var$forgotPassMessage","$42601f690614add3$var$confirmationPopup","$42601f690614add3$var$closePopup","$42601f690614add3$var$hidePopup","style","display","$42601f690614add3$var$showForgotPassError","message","textContent","classList","add","setTimeout","remove","$42601f690614add3$var$clearForgotPassError","$42601f690614add3$var$resetCaptcha","hcaptcha","reset","$42601f690614add3$var$checkEmailExists","email","data","error","supabase","from","select","eq","single","addEventListener","event","preventDefault","value","trim","captchaToken","getResponse","auth","resetPasswordForEmail","window","location","href"],"version":3,"file":"forgotPass.860b03b3.js.map"}