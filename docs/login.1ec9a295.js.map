{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,SCGA,QAAQ,GAAG,CAAC,EAAA,QAAO,EAEnB,MAAM,EAAa,SAAS,cAAc,CAAC,cACrC,EAAgB,SAAS,cAAc,CAAC,iBACxC,EAAe,SAAS,cAAc,CAAC,gBACvC,EAAY,SAAS,cAAc,CAAC,oBACpC,EAAiB,SAAS,cAAc,CAAC,kBAIzC,EAAiB,AAAC,IACtB,EAAa,WAAW,CAAG,EAC3B,EAAa,SAAS,CAAC,GAAG,CAAC,QAAQ,SACnC,EAAa,KAAK,CAAC,OAAO,CAAG,QAG5B,WAAW,KACV,EAAa,KAAK,CAAC,OAAO,CAAG,OAC7B,EAAa,SAAS,CAAC,MAAM,CAAC,QAC/B,EAAG,IACN,EAGM,EAAkB,KACtB,EAAa,KAAK,CAAC,OAAO,CAAG,OAC7B,EAAa,SAAS,CAAC,MAAM,CAAC,QAChC,EAGM,EAAe,KACK,aAApB,OAAO,UACT,SAAS,KAAK,EAElB,EAIA,EAAe,gBAAgB,CAAC,QAAS,KAGnC,AAAsB,aAFA,EAAc,YAAY,CAAC,SAGnD,EAAc,YAAY,CAAC,OAAQ,QACnC,EAAe,SAAS,CAAG,0CAE3B,EAAc,YAAY,CAAC,OAAQ,YACnC,EAAe,SAAS,CAAG,kCAE/B,GAEA,EAAU,gBAAgB,CAAC,SAAU,MAAO,IAC1C,EAAM,cAAc,GAEpB,IAAM,EAAQ,EAAW,KAAK,CAAC,IAAI,GAC7B,EAAW,EAAc,KAAK,CAAC,IAAI,GAMzC,GAHA,IAGI,CAAC,GAAS,CAAC,EAAU,CACvB,EAAe,oCACf,MACF,CAGA,IADiC,6BAA6B,IAAI,CAC/C,GAAQ,CACzB,EAAe,uCACf,MACF,CAGA,IAAM,EAAe,SAAS,WAAW,GACzC,GAAI,CAAC,EAAc,CACjB,EAAe,gCACf,MACF,CAGA,GAAI,CACF,GAAM,CAAA,KAAE,CAAI,CAAA,MAAE,CAAK,CAAE,CAAG,MAAM,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,IAAI,CAAC,kBAAkB,CAAC,CAC7D,MAAA,EACA,SAAA,EACA,QAAS,CACP,aAAA,CACF,CACF,GAGC,GAAI,EAAO,CACV,QAAQ,KAAK,CAAC,kBAAmB,GAC7B,EAAM,OAAO,CAAC,QAAQ,CAAC,6BAExB,EAAe,kDAEhB,EAAe,iBAAmB,EAAM,OAAO,EAEjD,IACA,MACF,CAIA,GAAI,CADS,EAAK,IAAI,CACX,CACT,EAAe,+CACf,MACF,CAIA,WAAW,KAET,EAAa,KAAK,CAAC,KAAK,CAAG,QAC3B,EAAa,WAAW,CAAG,mCAC3B,OAAO,QAAQ,CAAC,IAAI,CAAG,oBACzB,EAAG,IAEL,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,oBAAqB,GAC/B,EAAe,iDAEtB,GACC,CACA","sources":["<anon>","public/authlog.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire3d38\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire3d38\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $iAutD = parcelRequire(\"iAutD\");\n// Log Supabase object for debugging\nconsole.log((0, $iAutD.supabase));\nconst $6dd52b42882e6c1a$var$emailInput = document.getElementById(\"logInEmail\");\nconst $6dd52b42882e6c1a$var$passwordInput = document.getElementById(\"logInPassword\");\nconst $6dd52b42882e6c1a$var$errorMessage = document.getElementById(\"loginMessage\");\nconst $6dd52b42882e6c1a$var$loginForm = document.getElementById(\"logInFormDetails\");\nconst $6dd52b42882e6c1a$var$togglePassword = document.getElementById(\"togglePassword\");\n// Show error message and shake effec\nconst $6dd52b42882e6c1a$var$showLoginError = (message)=>{\n    $6dd52b42882e6c1a$var$errorMessage.textContent = message;\n    $6dd52b42882e6c1a$var$errorMessage.classList.add(\"alert\", \"shake\"); // Add alert and shake class\n    $6dd52b42882e6c1a$var$errorMessage.style.display = \"block\";\n    // Automatically hide the error message after 5 seconds\n    setTimeout(()=>{\n        $6dd52b42882e6c1a$var$errorMessage.style.display = \"none\";\n        $6dd52b42882e6c1a$var$errorMessage.classList.remove(\"shake\"); // Remove shake effect after it's hidden\n    }, 5000); // 5000ms = 5 seconds\n};\n// Clear error message when valid input is entered\nconst $6dd52b42882e6c1a$var$clearLoginError = ()=>{\n    $6dd52b42882e6c1a$var$errorMessage.style.display = \"none\";\n    $6dd52b42882e6c1a$var$errorMessage.classList.remove(\"shake\");\n};\n// Reset hCaptcha after failed login\nconst $6dd52b42882e6c1a$var$resetCaptcha = ()=>{\n    if (typeof hcaptcha !== \"undefined\") hcaptcha.reset(); // Reset the hCaptcha so the user can retry login\n};\n// Toggle password visibility\n$6dd52b42882e6c1a$var$togglePassword.addEventListener(\"click\", ()=>{\n    const passwordFieldType = $6dd52b42882e6c1a$var$passwordInput.getAttribute(\"type\");\n    if (passwordFieldType === \"password\") {\n        $6dd52b42882e6c1a$var$passwordInput.setAttribute(\"type\", \"text\"); // Show password\n        $6dd52b42882e6c1a$var$togglePassword.innerHTML = `<i class=\"fa-solid fa-eye-slash\"></i>`; // Change icon to \"eye-slash\"\n    } else {\n        $6dd52b42882e6c1a$var$passwordInput.setAttribute(\"type\", \"password\"); // Hide password\n        $6dd52b42882e6c1a$var$togglePassword.innerHTML = `<i class=\"fa-solid fa-eye\"></i>`; // Change icon to \"eye\"\n    }\n});\n$6dd52b42882e6c1a$var$loginForm.addEventListener(\"submit\", async (event)=>{\n    event.preventDefault();\n    const email = $6dd52b42882e6c1a$var$emailInput.value.trim();\n    const password = $6dd52b42882e6c1a$var$passwordInput.value.trim();\n    // Clear previous error messages\n    $6dd52b42882e6c1a$var$clearLoginError();\n    // Validate email and password\n    if (!email || !password) {\n        $6dd52b42882e6c1a$var$showLoginError(\"Email and password are required.\");\n        return;\n    }\n    const validateEmail = (email)=>/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(email);\n    if (!validateEmail(email)) {\n        $6dd52b42882e6c1a$var$showLoginError(\"Please enter a valid email address.\");\n        return;\n    }\n    // Check for hCaptcha token\n    const captchaToken = hcaptcha.getResponse();\n    if (!captchaToken) {\n        $6dd52b42882e6c1a$var$showLoginError(\"Please complete the CAPTCHA.\");\n        return;\n    }\n    // Proceed with login using Supabase (password validation is handled by Supabase)\n    try {\n        const { data: data, error: error } = await (0, $iAutD.supabase).auth.signInWithPassword({\n            email: email,\n            password: password,\n            options: {\n                captchaToken: captchaToken\n            }\n        });\n        // Handle Supabase login errors (wrong password or email not found)\n        if (error) {\n            console.error(\"Supabase Error:\", error); // Log the error for debugging\n            if (error.message.includes(\"Invalid login credentials\")) // Handle invalid email or password (no distinction from Supabase)\n            $6dd52b42882e6c1a$var$showLoginError(\"Incorrect email or password. Please try again.\");\n            else $6dd52b42882e6c1a$var$showLoginError(\"Login failed: \" + error.message);\n            $6dd52b42882e6c1a$var$resetCaptcha(); // Reset the hCaptcha after a failed login\n            return; // Reset the hCaptcha after a failed login\n        }\n        const user = data.user;\n        if (!user) {\n            $6dd52b42882e6c1a$var$showLoginError(\"Error: Could not retrieve user information.\");\n            return;\n        }\n        setTimeout(()=>{\n            // Success! Redirect to dashboard\n            $6dd52b42882e6c1a$var$errorMessage.style.color = \"green\";\n            $6dd52b42882e6c1a$var$errorMessage.textContent = \"Login successful! Redirecting...\";\n            window.location.href = \"/dashardboard.html\";\n        }, 3000);\n    } catch (error) {\n        console.error(\"Unexpected Error:\", error);\n        $6dd52b42882e6c1a$var$showLoginError(\"Something went wrong. Please try again later.\");\n        // Show error from Supabase (like invalid credentials or weak password)\n        $6dd52b42882e6c1a$var$resetCaptcha(); // Reset hCaptcha after failed login\n    }\n});\n\n\n//# sourceMappingURL=login.1ec9a295.js.map\n","import { supabase } from './supabaseClient';  // Import the Supabase client\r\n\r\n// Log Supabase object for debugging\r\nconsole.log(supabase);\r\n\r\nconst emailInput = document.getElementById('logInEmail');\r\nconst passwordInput = document.getElementById('logInPassword');\r\nconst errorMessage = document.getElementById('loginMessage');\r\nconst loginForm = document.getElementById('logInFormDetails');\r\nconst togglePassword = document.getElementById('togglePassword');\r\n\r\n\r\n// Show error message and shake effec\r\nconst showLoginError = (message)=>{\r\n  errorMessage.textContent = message;\r\n  errorMessage.classList.add('alert','shake'); // Add alert and shake class\r\n  errorMessage.style.display = 'block';\r\n\r\n   // Automatically hide the error message after 5 seconds\r\n   setTimeout(() => {\r\n    errorMessage.style.display = 'none';\r\n    errorMessage.classList.remove('shake'); // Remove shake effect after it's hidden\r\n   }, 5000); // 5000ms = 5 seconds\r\n}\r\n\r\n// Clear error message when valid input is entered\r\nconst clearLoginError = ()=>{\r\n  errorMessage.style.display = 'none';\r\n  errorMessage.classList.remove('shake');\r\n}\r\n\r\n// Reset hCaptcha after failed login\r\nconst resetCaptcha = ()=>{\r\n  if (typeof hcaptcha !== 'undefined') {\r\n    hcaptcha.reset();  // Reset the hCaptcha so the user can retry login\r\n  }\r\n}\r\n\r\n\r\n// Toggle password visibility\r\ntogglePassword.addEventListener('click', () => {\r\n  const passwordFieldType = passwordInput.getAttribute('type');\r\n  \r\n  if (passwordFieldType === 'password') {\r\n    passwordInput.setAttribute('type', 'text');  // Show password\r\n    togglePassword.innerHTML = `<i class=\"fa-solid fa-eye-slash\"></i>`;  // Change icon to \"eye-slash\"\r\n  } else {\r\n    passwordInput.setAttribute('type', 'password');  // Hide password\r\n    togglePassword.innerHTML = `<i class=\"fa-solid fa-eye\"></i>`;  // Change icon to \"eye\"\r\n  }\r\n});\r\n\r\nloginForm.addEventListener('submit', async (event) => {\r\n  event.preventDefault();\r\n  \r\n  const email = emailInput.value.trim();\r\n  const password = passwordInput.value.trim();\r\n\r\n  // Clear previous error messages\r\n  clearLoginError();\r\n\r\n  // Validate email and password\r\n  if (!email || !password) {\r\n    showLoginError('Email and password are required.');\r\n    return;\r\n  }\r\n\r\n  const validateEmail = (email) => /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(email);\r\n  if (!validateEmail(email)) {\r\n    showLoginError('Please enter a valid email address.');\r\n    return;\r\n  }\r\n\r\n  // Check for hCaptcha token\r\n  const captchaToken = hcaptcha.getResponse();\r\n  if (!captchaToken) {\r\n    showLoginError('Please complete the CAPTCHA.');\r\n    return;\r\n  }\r\n\r\n  // Proceed with login using Supabase (password validation is handled by Supabase)\r\n  try {\r\n    const { data, error } = await supabase.auth.signInWithPassword({\r\n      email,\r\n      password,\r\n      options: {\r\n        captchaToken,  // Send hCaptcha token\r\n      },\r\n    });\r\n\r\n     // Handle Supabase login errors (wrong password or email not found)\r\n     if (error) {\r\n      console.error('Supabase Error:', error);  // Log the error for debugging\r\n      if (error.message.includes('Invalid login credentials')) {\r\n         // Handle invalid email or password (no distinction from Supabase)\r\n         showLoginError('Incorrect email or password. Please try again.');\r\n      } else {\r\n        showLoginError('Login failed: ' + error.message);\r\n      }\r\n      resetCaptcha();  // Reset the hCaptcha after a failed login\r\n      return;  // Reset the hCaptcha after a failed login\r\n    }\r\n  \r\n\r\n    const user = data.user;\r\n    if (!user) {\r\n      showLoginError('Error: Could not retrieve user information.');\r\n      return;\r\n    }\r\n\r\n\r\n    \r\n    setTimeout(() => {\r\n      // Success! Redirect to dashboard\r\n      errorMessage.style.color = 'green';\r\n      errorMessage.textContent = 'Login successful! Redirecting...';\r\n      window.location.href = '/dashardboard.html';\r\n    }, 3000);\r\n\r\n  } catch (error) {\r\n    console.error('Unexpected Error:', error);  \r\n        showLoginError('Something went wrong. Please try again later.');\r\n // Show error from Supabase (like invalid credentials or weak password)\r\n resetCaptcha(); // Reset hCaptcha after failed login\r\n  }\r\n  });"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$iAutD","console","log","supabase","$6dd52b42882e6c1a$var$emailInput","document","getElementById","$6dd52b42882e6c1a$var$passwordInput","$6dd52b42882e6c1a$var$errorMessage","$6dd52b42882e6c1a$var$loginForm","$6dd52b42882e6c1a$var$togglePassword","$6dd52b42882e6c1a$var$showLoginError","message","textContent","classList","add","style","display","setTimeout","remove","$6dd52b42882e6c1a$var$clearLoginError","$6dd52b42882e6c1a$var$resetCaptcha","hcaptcha","reset","addEventListener","passwordFieldType","getAttribute","setAttribute","innerHTML","event","preventDefault","email","value","trim","password","test","captchaToken","getResponse","data","error","auth","signInWithPassword","options","includes","user","color","window","location","href"],"version":3,"file":"login.1ec9a295.js.map"}