{"mappings":"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","sources":["<anon>","public/auth.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire3d38\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire3d38\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $iAutD = parcelRequire(\"iAutD\");\n// To handle Discord sign Up method\ndocument.getElementById(\"discordSignUpBtn\").addEventListener(\"click\", function() {\n    // Trigger Supabase's OAuth sign-in with Discord\n    (0, $iAutD.supabase).auth.signInWithOAuth({\n        provider: \"discord\",\n        options: {\n            redirectTo: \"http://localhost:1234/dashardboard.html\"\n        }\n    });\n});\n// To handle GitHub sign Up method\ndocument.getElementById(\"gitHubSignUpBtn\").addEventListener(\"click\", function() {\n    // Trigger Supabase's OAuth sign-in with GitHub\n    (0, $iAutD.supabase).auth.signInWithOAuth({\n        provider: \"github\",\n        options: {\n            redirectTo: \"http://localhost:1234/dashardboard.html\"\n        }\n    });\n});\n// Optional: Check the user's authentication status\n(0, $iAutD.supabase).auth.getSession().then(({ data: { session: session }, error: error })=>{\n    if (session) console.log(\"User is authenticated:\", session.user);\n    else console.log(\"User is not authenticated\");\n});\nconst $344cefe784e0e16d$var$signUpNewUser = async ()=>{\n    const form = document.getElementById(\"signUpFormDetails\");\n    const emailInput = document.getElementById(\"signUpEmail\");\n    const passwordInput = document.getElementById(\"signUpPassword\");\n    const errorMessage = document.getElementById(\"confirmationMessage\");\n    const togglePassword = document.getElementById(\"togglePassword\");\n    // Show error message and shake effect\n    const showError = (message)=>{\n        errorMessage.textContent = message;\n        errorMessage.classList.add(\"alert\", \"shake\"); // Add alert and shake class\n        errorMessage.style.display = \"block\"; // Ensure it is visible\n        // Automatically hide the error message after 5 seconds\n        setTimeout(()=>{\n            errorMessage.style.display = \"none\";\n            errorMessage.classList.remove(\"shake\"); // Remove shake effect after it's hidden\n        }, 9000); // 5000ms = 5 seconds\n    };\n    // Clear error message when valid input is entered\n    const clearError = ()=>{\n        errorMessage.style.display = \"none\";\n        errorMessage.classList.remove(\"shake\");\n    };\n    // Toggle password visibility\n    togglePassword.addEventListener(\"click\", ()=>{\n        const passwordFieldType = passwordInput.getAttribute(\"type\");\n        if (passwordFieldType === \"password\") {\n            passwordInput.setAttribute(\"type\", \"text\"); // Show password\n            togglePassword.innerHTML = `<i class=\"fa-solid fa-eye-slash\"></i>`; // Change icon to \"eye-slash\"\n        } else {\n            passwordInput.setAttribute(\"type\", \"password\"); // Hide password\n            togglePassword.innerHTML = `<i class=\"fa-solid fa-eye\"></i>`; // Change icon to \"eye\"\n        }\n    });\n    const resetCaptcha = ()=>{\n        if (typeof hcaptcha !== \"undefined\") hcaptcha.reset(); // Reset the hCaptcha so the user can retry login\n    };\n    form.addEventListener(\"submit\", async (event)=>{\n        event.preventDefault();\n        const email = emailInput.value.trim();\n        const password = passwordInput.value.trim();\n        const captchaToken = hcaptcha.getResponse(); // Get the hCaptcha token\n        // Clear error message if inputs are valid\n        clearError();\n        if (!email || !password) {\n            showError(\"Email and password are required.\");\n            resetCaptcha();\n            return;\n        }\n        // Basic email validation\n        const validateEmail = (email)=>/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(email);\n        // Email validation check\n        if (!validateEmail(email)) {\n            showError(\"Please enter a valid email address.\");\n            resetCaptcha();\n            return;\n        }\n        if (!captchaToken) {\n            showError(\"Please complete the CAPTCHA.\");\n            resetCaptcha();\n            return;\n        }\n        try {\n            // Sign up the user with Supabase\n            const { data: data, error: error } = await (0, $iAutD.supabase).auth.signUp({\n                email: email,\n                password: password,\n                options: {\n                    captchaToken: captchaToken\n                }\n            });\n            // Check for Supabase error\n            if (error) {\n                showError(error.message);\n                resetCaptcha();\n                return;\n            }\n            // Access the user object from the data returned by Supabase\n            const user = data.user;\n            if (!user) {\n                showError(\"Error: Could not retrieve user information after sign-up.\");\n                resetCaptcha();\n                return;\n            }\n            // Success message\n            errorMessage.style.color = \"green\";\n            errorMessage.textContent = \"Sign up successful! Please check your email to verify your account.\";\n            // Store the email temporarily so it can be used in the verification page\n            localStorage.setItem(\"pendingVerificationEmail\", email);\n            // Redirect to verification pending page\n            window.location.href = \"./verification-pending.html\"; // Adjust the path as needed\n        } catch (error) {\n            showError(\"Something went wrong. Please try again later.\");\n            resetCaptcha();\n        }\n    });\n};\n// Call the function to ensure the form behavior is handled\n$344cefe784e0e16d$var$signUpNewUser();\n\n\n//# sourceMappingURL=index.6567cc0c.js.map\n","import { supabase } from './supabaseClient';  // Import the Supabase client\r\n\r\n// To handle Discord sign Up method\r\ndocument.getElementById(\"discordSignUpBtn\").addEventListener(\"click\", function () {\r\n    // Trigger Supabase's OAuth sign-in with Discord\r\n    supabase.auth.signInWithOAuth({\r\n      provider: 'discord',\r\n      options: {\r\n        redirectTo: 'http://localhost:1234/dashardboard.html' \r\n      }\r\n    });\r\n  })\r\n\r\n    // To handle GitHub sign Up method\r\n    document.getElementById(\"gitHubSignUpBtn\").addEventListener(\"click\", function () {\r\n    // Trigger Supabase's OAuth sign-in with GitHub\r\n    supabase.auth.signInWithOAuth({\r\n      provider: 'github',\r\n      options: {\r\n        redirectTo: 'http://localhost:1234/dashardboard.html' \r\n      }\r\n      \r\n    })\r\n    });\r\n\r\n    // Optional: Check the user's authentication status\r\n    supabase.auth.getSession().then(({ data: { session }, error }) => {\r\n    if (session) {\r\n      console.log(\"User is authenticated:\", session.user);\r\n    } else {\r\n      console.log(\"User is not authenticated\");\r\n    }\r\n  });\r\n\r\nconst signUpNewUser = async ()=>{\r\n    const form = document.getElementById('signUpFormDetails');\r\n    const emailInput = document.getElementById('signUpEmail');\r\n    const passwordInput = document.getElementById('signUpPassword');\r\n    const errorMessage = document.getElementById('confirmationMessage');\r\n    const togglePassword = document.getElementById('togglePassword');\r\n    \r\n    \r\n    // Show error message and shake effect\r\n    const showError = (message)=>{\r\n      errorMessage.textContent = message;\r\n      errorMessage.classList.add('alert', 'shake');  // Add alert and shake class\r\n      errorMessage.style.display = 'block';  // Ensure it is visible\r\n    \r\n      // Automatically hide the error message after 5 seconds\r\n      setTimeout(() => {\r\n        errorMessage.style.display = 'none';\r\n        errorMessage.classList.remove('shake');  // Remove shake effect after it's hidden\r\n      }, 9000);  // 5000ms = 5 seconds\r\n    }\r\n    \r\n    // Clear error message when valid input is entered\r\n    const clearError = ()=>{\r\n      errorMessage.style.display = 'none';\r\n      errorMessage.classList.remove('shake');\r\n    }\r\n    \r\n    \r\n    // Toggle password visibility\r\n    togglePassword.addEventListener('click', () => {\r\n      const passwordFieldType = passwordInput.getAttribute('type');\r\n      \r\n      if (passwordFieldType === 'password') {\r\n        passwordInput.setAttribute('type', 'text');  // Show password\r\n        togglePassword.innerHTML = `<i class=\"fa-solid fa-eye-slash\"></i>`;  // Change icon to \"eye-slash\"\r\n      } else {\r\n        passwordInput.setAttribute('type', 'password');  // Hide password\r\n        togglePassword.innerHTML = `<i class=\"fa-solid fa-eye\"></i>`;  // Change icon to \"eye\"\r\n      }\r\n    });\r\n    const resetCaptcha = ()=>{\r\n      if (typeof hcaptcha !== 'undefined') {\r\n        hcaptcha.reset();  // Reset the hCaptcha so the user can retry login\r\n      }\r\n    }\r\n    \r\n    form.addEventListener('submit', async (event) => {\r\n      event.preventDefault();\r\n      \r\n      const email = emailInput.value.trim();\r\n      const password = passwordInput.value.trim();\r\n      const captchaToken = hcaptcha.getResponse();  // Get the hCaptcha token\r\n    \r\n    \r\n      // Clear error message if inputs are valid\r\n      clearError();\r\n    \r\n      if(!email || !password) {\r\n        showError('Email and password are required.');\r\n        resetCaptcha()\r\n        return; \r\n      }\r\n    \r\n      // Basic email validation\r\n      const validateEmail = (email) => /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(email);\r\n      // Email validation check\r\n      if (!validateEmail(email)) {\r\n        showError('Please enter a valid email address.');\r\n        resetCaptcha()\r\n        return;\r\n      }\r\n    \r\n      if (!captchaToken) {\r\n        showError('Please complete the CAPTCHA.');\r\n        resetCaptcha()\r\n        return; \r\n      }\r\n    \r\n      try {\r\n        // Sign up the user with Supabase\r\n        const { data, error } = await supabase.auth.signUp({\r\n          email: email,\r\n          password: password,\r\n          options: {\r\n            captchaToken,  // Send hCaptcha token\r\n          },\r\n        });\r\n        \r\n         // Check for Supabase error\r\n        if (error) {\r\n          showError( error.message);\r\n          resetCaptcha()\r\n          return;\r\n        }\r\n    \r\n           // Access the user object from the data returned by Supabase\r\n        const user = data.user;\r\n        \r\n        if(!user) {\r\n          showError('Error: Could not retrieve user information after sign-up.');\r\n          resetCaptcha()\r\n          return;\r\n        }\r\n    \r\n        // Success message\r\n        errorMessage.style.color = 'green';\r\n        errorMessage.textContent = 'Sign up successful! Please check your email to verify your account.';\r\n    \r\n        // Store the email temporarily so it can be used in the verification page\r\n        localStorage.setItem('pendingVerificationEmail', email);\r\n        // Redirect to verification pending page\r\n          window.location.href = './verification-pending.html';  // Adjust the path as needed\r\n          \r\n        } catch (error) {\r\n          showError('Something went wrong. Please try again later.');\r\n          resetCaptcha()\r\n        }\r\n      });\r\n};\r\n// Call the function to ensure the form behavior is handled\r\nsignUpNewUser();"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$iAutD","document","getElementById","addEventListener","supabase","auth","signInWithOAuth","provider","options","redirectTo","getSession","then","data","session","error","console","log","user","$344cefe784e0e16d$var$signUpNewUser","form","emailInput","passwordInput","errorMessage","togglePassword","showError","message","textContent","classList","add","style","display","setTimeout","remove","clearError","passwordFieldType","getAttribute","setAttribute","innerHTML","resetCaptcha","hcaptcha","reset","event","preventDefault","email","value","trim","password","captchaToken","getResponse","test","signUp","color","localStorage","setItem","window","location","href"],"version":3,"file":"index.6567cc0c.js.map"}