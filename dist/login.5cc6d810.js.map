{"mappings":"AACA,MAAM,aAAa,SAAS,cAAc,CAAC;AAC3C,MAAM,gBAAgB,SAAS,cAAc,CAAC;AAC9C,MAAM,eAAe,SAAS,cAAc,CAAC;AAC7C,MAAM,YAAY,SAAS,cAAc,CAAC;AAC1C,MAAM,iBAAiB,SAAS,cAAc,CAAC;AAG/C,qCAAqC;AACrC,MAAM,iBAAiB,CAAC;IACtB,aAAa,WAAW,GAAG;IAC3B,aAAa,SAAS,CAAC,GAAG,CAAC,SAAQ,UAAU,4BAA4B;IACzE,aAAa,KAAK,CAAC,OAAO,GAAG;IAE5B,uDAAuD;IACvD,WAAW;QACV,aAAa,KAAK,CAAC,OAAO,GAAG;QAC7B,aAAa,SAAS,CAAC,MAAM,CAAC,UAAU,wCAAwC;IACjF,GAAG,OAAO,qBAAqB;AAClC;AAEA,kDAAkD;AAClD,MAAM,kBAAkB;IACtB,aAAa,KAAK,CAAC,OAAO,GAAG;IAC7B,aAAa,SAAS,CAAC,MAAM,CAAC;AAChC;AAGA,6BAA6B;AAC7B,eAAe,gBAAgB,CAAC,SAAS;IACvC,MAAM,oBAAoB,cAAc,YAAY,CAAC;IAErD,IAAI,sBAAsB,YAAY;QACpC,cAAc,YAAY,CAAC,QAAQ,SAAU,gBAAgB;QAC7D,eAAe,SAAS,GAAG,CAAC,qCAAqC,CAAC,EAAG,6BAA6B;IACpG,OAAO;QACL,cAAc,YAAY,CAAC,QAAQ,aAAc,gBAAgB;QACjE,eAAe,SAAS,GAAG,CAAC,+BAA+B,CAAC,EAAG,uBAAuB;IACxF;AACF;AAEA,UAAU,gBAAgB,CAAC,UAAU,OAAO;IAC1C,MAAM,cAAc;IAEpB,MAAM,QAAQ,WAAW,KAAK,CAAC,IAAI;IACnC,MAAM,WAAW,cAAc,KAAK,CAAC,IAAI;IAEzC,gCAAgC;IAChC;IAEA,8BAA8B;IAC9B,IAAI,CAAC,SAAS,CAAC,UAAU;QACvB,eAAe;QACf;IACF;IAEA,MAAM,gBAAgB,CAAC,QAAU,6BAA6B,IAAI,CAAC;IACnE,IAAI,CAAC,cAAc,QAAQ;QACzB,eAAe;QACf;IACF;IAEA,2BAA2B;IAC3B,MAAM,eAAe,SAAS,WAAW;IACzC,IAAI,CAAC,cAAc;QACjB,eAAe;QACf;IACF;IAEA,iFAAiF;IACjF,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,MAAM,CAAC;YACjD;YACA;YACA,SAAS;gBACP;YACF;QACF;QACC,mEAAmE;QACnE,IAAI,OAAO;YACV,QAAQ,KAAK,CAAC,mBAAmB,QAAS,8BAA8B;YACxE,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,8BACzB,eAAe;iBACV,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,8BAChC,eAAe;iBAEf,eAAe,mBAAmB,MAAM,OAAO;YAEjD;QACF;QAGA,MAAM,OAAO,KAAK,IAAI;QACtB,IAAI,CAAC,MAAM;YACT,eAAe;YACf;QACF;QAIA,WAAW;YACT,iCAAiC;YACjC,aAAa,KAAK,CAAC,KAAK,GAAG;YAC3B,aAAa,WAAW,GAAG;YAC3B,OAAO,QAAQ,CAAC,IAAI,GAAG;QACzB,GAAG;IAEL,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB,QAAS,sCAAsC;QAC9E,eAAe;QACtB,uEAAuE;QACpE,SAAS,KAAK,IAAI,oCAAoC;IACxD;AACA","sources":["public/authlog.js"],"sourcesContent":["\r\nconst emailInput = document.getElementById('logInEmail');\r\nconst passwordInput = document.getElementById('logInPassword');\r\nconst errorMessage = document.getElementById('loginMessage');\r\nconst loginForm = document.getElementById('logInFormDetails');\r\nconst togglePassword = document.getElementById('togglePassword');\r\n\r\n\r\n// Show error message and shake effec\r\nconst showLoginError = (message)=>{\r\n  errorMessage.textContent = message;\r\n  errorMessage.classList.add('alert','shake'); // Add alert and shake class\r\n  errorMessage.style.display = 'block';\r\n\r\n   // Automatically hide the error message after 5 seconds\r\n   setTimeout(() => {\r\n    errorMessage.style.display = 'none';\r\n    errorMessage.classList.remove('shake'); // Remove shake effect after it's hidden\r\n   }, 5000); // 5000ms = 5 seconds\r\n}\r\n\r\n// Clear error message when valid input is entered\r\nconst clearLoginError = ()=>{\r\n  errorMessage.style.display = 'none';\r\n  errorMessage.classList.remove('shake');\r\n}\r\n\r\n\r\n// Toggle password visibility\r\ntogglePassword.addEventListener('click', () => {\r\n  const passwordFieldType = passwordInput.getAttribute('type');\r\n  \r\n  if (passwordFieldType === 'password') {\r\n    passwordInput.setAttribute('type', 'text');  // Show password\r\n    togglePassword.innerHTML = `<i class=\"fa-solid fa-eye-slash\"></i>`;  // Change icon to \"eye-slash\"\r\n  } else {\r\n    passwordInput.setAttribute('type', 'password');  // Hide password\r\n    togglePassword.innerHTML = `<i class=\"fa-solid fa-eye\"></i>`;  // Change icon to \"eye\"\r\n  }\r\n});\r\n\r\nloginForm.addEventListener('submit', async (event) => {\r\n  event.preventDefault();\r\n  \r\n  const email = emailInput.value.trim();\r\n  const password = passwordInput.value.trim();\r\n\r\n  // Clear previous error messages\r\n  clearLoginError();\r\n\r\n  // Validate email and password\r\n  if (!email || !password) {\r\n    showLoginError('Email and password are required.');\r\n    return;\r\n  }\r\n\r\n  const validateEmail = (email) => /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(email);\r\n  if (!validateEmail(email)) {\r\n    showLoginError('Please enter a valid email address.');\r\n    return;\r\n  }\r\n\r\n  // Check for hCaptcha token\r\n  const captchaToken = hcaptcha.getResponse();\r\n  if (!captchaToken) {\r\n    showLoginError('Please complete the CAPTCHA.');\r\n    return;\r\n  }\r\n\r\n  // Proceed with login using Supabase (password validation is handled by Supabase)\r\n  try {\r\n    const { data, error } = await supabase.auth.signIn({\r\n      email,\r\n      password,\r\n      options: {\r\n        captchaToken,  // Send hCaptcha token\r\n      },\r\n    });\r\n     // Handle Supabase login errors (wrong password or email not found)\r\n     if (error) {\r\n      console.error('Supabase Error:', error);  // Log the error for debugging\r\n      if (error.message.includes('Invalid login credentials')) {\r\n        showLoginError('Incorrect password. Please try again.');\r\n      } else if (error.message.includes('Invalid email or password')) {\r\n        showLoginError('This email does not exist in our system.');\r\n      } else {\r\n        showLoginError('Login failed: ' + error.message);\r\n      }\r\n      return;\r\n    }\r\n  \r\n\r\n    const user = data.user;\r\n    if (!user) {\r\n      showLoginError('Error: Could not retrieve user information.');\r\n      return;\r\n    }\r\n\r\n\r\n    \r\n    setTimeout(() => {\r\n      // Success! Redirect to dashboard\r\n      errorMessage.style.color = 'green';\r\n      errorMessage.textContent = 'Login successful! Redirecting...';\r\n      window.location.href = '/dashardboard.html';\r\n    }, 3000);\r\n\r\n  } catch (error) {\r\n    console.error('Unexpected Error:', error);  // Log unexpected errors for debugging\r\n        showLoginError('Something went wrong. Please try again later.');\r\n // Show error from Supabase (like invalid credentials or weak password)\r\n    hcaptcha.reset(); // Reset hCaptcha after failed login\r\n  }\r\n  });"],"names":[],"version":3,"file":"login.5cc6d810.js.map","sourceRoot":"/__parcel_source_root/"}